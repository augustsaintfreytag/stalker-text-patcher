local gc

-- Preloading
-- Mock game environment (`game`, `gc`) to allow running tests.

if game then
	gc = game.translate_string
	lulpeg = require "lulpeg"
	re = lulpeg.re
else
	gc = function(str)
		return str
	end
end

-- Configuration

local CONFIG = {
	-- The maximum number of characters in a snippet to assume it as a heading-like text
	-- to be capitalized. Primarily applies to text in bullet points.
	CAPITALIZATION_HEURISTIC_MAX_CHARS = 36,

	-- Apply color tags to parentheticals in description texts
	-- (applies `COLOR.TEXT_PARENTHETICAL`, slightly darker than regular text).
	COLOR_DESC_PARENTHETICALS = false,

	-- Apply color tags to bullet points with colons in description texts
	-- (applies `COLOR.TEXT_EMPHASIS` to text after colon, distinguishing left- and right-hand side).
	COLOR_DESC_COLON_BULLET_POINTS = true
}

-- Library

local DOT = "Р В Р’В Р вЂ™Р’В Р В РІР‚в„ўР вЂ™Р’В Р В Р’В Р Р†Р вЂљРІвЂћСћР В РІР‚в„ўР вЂ™Р’В Р В Р’В Р вЂ™Р’В Р В РІР‚в„ўР вЂ™Р’В Р В Р’В Р В РІР‚В Р В Р’В Р Р†Р вЂљРЎв„ўР В РІР‚в„ўР вЂ™Р’В Р В Р’В Р вЂ™Р’В Р В РІР‚в„ўР вЂ™Р’В Р В Р’В Р Р†Р вЂљРІвЂћСћР В РІР‚в„ўР вЂ™Р’В Р В Р’В Р вЂ™Р’В Р В Р’В Р Р†Р вЂљР’В Р В Р’В Р вЂ™Р’В Р В Р вЂ Р В РІР‚С™Р РЋРІвЂћСћР В Р’В Р В Р вЂ№Р В Р вЂ Р Р†Р вЂљРЎвЂєР РЋРЎвЂєР В Р’В Р вЂ™Р’В Р В РІР‚в„ўР вЂ™Р’В Р В Р’В Р вЂ™Р’В Р В Р’В Р Р†Р вЂљРІвЂћвЂ“Р В Р’В Р вЂ™Р’В Р В Р’В Р В РІР‚в„–Р В Р’В Р В РІР‚В Р В Р’В Р Р†Р вЂљРЎв„ўР В Р Р‹Р Р†Р вЂљРЎСљ"

local LINE_KIND = {
	TEXT = "text",
	BULLET_POINT = "bullet_point",
	SECTION_HEADER = "section_header"
}

local COLOR = {
	TEXT = "%c[ui_gray_2]",
	TEXT_EMPHASIS = "%c[ui_gray_3]",
	TEXT_PARENTHETICAL = "%c[ui_gray_1]",
	SECTION = "%c[ui_gray_3]",
	BULLET_NEUTRAL = "%c[d_cyan]",
	BULLET_BENEFICIAL = "%c[d_green]",
	BULLET_DETRIMENTAL = "%c[d_red]"
}

-- Logic

function normalize_name(name)
	name = capitalize_words(name)
	name = normalize_desc_parentheses(name)

	return name
end

function normalize_desc(desc)
	desc = trim_desc_spacing(desc)
	desc = rewrite_hyphen_lists(desc)
	desc = rewrite_stacked_bullet_points(desc)
	desc = rewrite_desc_heading_substitutes(desc)
	desc = rewrite_desc_heading_colors(desc)
	desc = rewrite_desc_bullet_point_lines(desc)
	desc = rewrite_desc_line_spacing(desc)

	return desc
end

function rewrite_stacked_bullet_points(desc)
	-- Split description into lines, check each `LINE_KIND` for being a bullet point.
	-- If two bullet points per line are found, insert new line before dot and preceding color tag.

	local lines = split_string_into_collection(desc, "\\n")
	local new_lines = {}

	for i = 1, #lines do
		local line = lines[i]

		-- If line does not contain two dot characters, skip line.
		local _, number_of_dots = string.gsub(line, DOT, DOT)

		if number_of_dots ~= 2 then
			table.insert(new_lines, line)
			goto continue
		end
		
		-- local color_tag_start_index, color_tag_end_index = re.find(line, "('%c['[a-zA-Z0-9_, ]+']')")

		-- Find start index after first occurrence of dot for matching.
		local first_dot_start_index = line:find(DOT)

		-- Find index of color tag, dot, color tag after initial dot to find unwanted concatenated segment.
		local second_dot_start_index, _ = re.find(line,
			"'%c['[a-zA-Z0-9_, ]+']'%s*'" .. DOT .. "'%s*'%c['[a-zA-Z0-9_, ]+']'", first_dot_start_index)

		-- Insert new line at second dot index, add to table.
		local left_line = line:sub(1, second_dot_start_index - 1)
		table.insert(new_lines, left_line)

		-- Insert remainder of line after second dot index, add to table.
		local right_line = line:sub(second_dot_start_index)
		table.insert(new_lines, right_line)

		::continue::
	end

	return table.concat(new_lines, " \\n")
end

function trim_desc_spacing(desc)
	local string_lookaround_range = 8

	-- Slice off beginning of description, remove any leading newlines and white space, reconcatenate
	local desc_head, desc_tail = desc:sub(1, string_lookaround_range), desc:sub(string_lookaround_range + 1)
	desc_head = re.gsub(desc_head, [[{'\n'%s*}+]], "")
	desc_head = string.gsub(desc_head, '^%s*{.-}%s*$', '%1')
	desc = desc_head .. desc_tail

	-- Slice off end of description, remove any trailing newlines and white space, reconcatenate
	local desc_head, desc_tail = desc:sub(1, -string_lookaround_range), desc:sub(-string_lookaround_range + 1)
	desc_tail = re.gsub(desc_tail, [[{'\n'%s*}+]], "")
	desc = desc_head .. desc_tail

	return desc
end

function rewrite_desc_line_spacing(desc)
	local lines = split_string_into_collection(desc, "\\n")

	local new_lines = {}
	local last_line_kind = nil

	for i = 1, #lines do
		-- Unpack line as trimmed line

		local line = lines[i]:gsub("^%s*(.-)%s*$", "%1")
		local line_kind = get_line_kind(line)

		if not line_kind then
			goto continue
		end

		-- If line is text, always prepend paragraph break (omit if first element)
		-- If line is a section header, always prepend paragraph break (omit if first element)
		if (line_kind == LINE_KIND.TEXT) or (line_kind == LINE_KIND.SECTION_HEADER) then
			if last_line_kind ~= nil then
				table.insert(new_lines, " \\n \\n")
			end

			table.insert(new_lines, line)
			goto continue
		end

		if line_kind == LINE_KIND.BULLET_POINT then
			if last_line_kind == LINE_KIND.TEXT then
				table.insert(new_lines, " \\n \\n")
			else
				table.insert(new_lines, " \\n")
			end

			table.insert(new_lines, line)
			goto continue
		end

		::continue::

		if line_kind then
			last_line_kind = line_kind
		end
	end

	return table.concat(new_lines, "")
end

function rewrite_hyphen_lists(desc)
	-- Replace sections defined with a hyphen after color tags with bullet points (dot).
	-- Mainly applicable to descriptions of ammunition items.

	return re.gsub(desc, "'] - '", "]  " .. DOT .. " ")
end

function rewrite_desc_bullet_point_lines(desc)
	local lines = split_string_into_collection(desc, "\\n")
	local new_lines = {}

	for i = 1, #lines do
		local line = lines[i]
		-- Find index of the last character in a match of color tag, dot, color tag, and whitespace.
		local _, leader_end_index =
			re.find(line, "'" .. DOT .. "'%s*('%c['[a-zA-Z0-9_, ]+']')*%s*")

		if not leader_end_index then
			table.insert(new_lines, line)
			goto continue
		end

		-- Bullet point line found, destructure into components.

		-- local line_prefix = line:sub(1, leader_end_index)
		local line_content = line:sub(leader_end_index + 1)

		-- Define rewritten line with bullet point with appropriate color tags and spacing.

		local line_new = " " .. COLOR.BULLET_NEUTRAL .. " " .. DOT .. " "

		-- Find parenthetical in line content and wrap in appropriate color tags (`COLOR.PARENTHETICAL`).

		if CONFIG.COLOR_DESC_PARENTHETICALS then
			line_content = re.gsub(line_content, "'('{.+}')'", COLOR.TEXT_PARENTHETICAL .. "(%1)" .. COLOR.TEXT)
		end

		if line_content:find(":") then
			-- Line contains a colon. Split, capitalize all to the left, capitalize by length on the right.
			local line_name_parts = split_string_into_collection(line_content, ":")
			local line_name_left = line_name_parts[1] or ""
			local line_name_right = trim_string(line_name_parts[2] or "")

			local line_had_space_after_colon = line_name_parts[2]:sub(1, 1) == " "

			line_name_left = capitalize_words(line_name_left)
			line_name_right = capitalize_words_by_length(line_name_right)

			if CONFIG.COLOR_DESC_COLON_BULLET_POINTS then
				line_new = line_new ..
				COLOR.TEXT ..
				line_name_left ..
				":" .. COLOR.TEXT_EMPHASIS .. (line_had_space_after_colon and " " or "") .. line_name_right
			else
				line_new = line_new ..
				COLOR.TEXT .. line_name_left .. ":" .. (line_had_space_after_colon and " " or "") .. line_name_right
			end
		else
			line_new = line_new .. COLOR.TEXT .. capitalize_words_by_length(line_content)
		end

		table.insert(new_lines, line_new)
		::continue::
	end

	return table.concat(new_lines, " \\n")
end

function normalize_desc_parentheses(str)
	-- Normalize parentheses (only use round parentheses)
	str = str:gsub("[%[%{]", "(")
	str = str:gsub("[%]%}]", ")")

	-- Separate touching parentheses without whitespace
	str = str:gsub("(%(.+?%))(%(.+?%))", "$1 $2")

	return str
end

-- Section Heading Rewrite

-- TODO: Consider stripping out color tags and dot from localized strings (may be working as-is).

function formatted_desc_heading(heading)
	-- Make input all uppercase and append a colon, wrap in color tags.
	local formatted_heading = string.upper(heading) .. ":"
	return COLOR.SECTION .. formatted_heading .. COLOR.TEXT
end

local DESC_HEADING_SEARCH_PATTERN = {
	AMMO = gc("ui_mcm_SortingPlus_110ammo"),
	USED_FOR_CRAFTING = gc("st_craft_used_for"),
	UNLOCKS_FOR_CRAFTING = gc("st_craft_unlocks"),
	USED_FOR_COOKING = gc("st_cook_used_for"),
	REPLACEMENT_PARTS = gc("st_ui_awr_parts_list"),
	COMPATIBLE_REPAIR_KITS = gc("st_ui_repair_kit_list"),
	COMPATIBLE_WORKSHOP_LIST = gc("st_ui_workshop_kit_list"),
	COMPONENTS = gc("st_ui_disassemly_list"),
	UPGRADES = gc("st_ui_upgrade_list")
}

local DESC_HEADING_REPLACEMENTS = {
	[DESC_HEADING_SEARCH_PATTERN.AMMO] = formatted_desc_heading(gc("ui_saint_description_section_ammo")),
	[DESC_HEADING_SEARCH_PATTERN.USED_FOR_CRAFTING] = formatted_desc_heading(gc(
	"ui_saint_description_section_used_for_crafting")),
	[DESC_HEADING_SEARCH_PATTERN.UNLOCKS_FOR_CRAFTING] = formatted_desc_heading(gc(
	"ui_saint_description_section_unlocks_for_crafting")),
	[DESC_HEADING_SEARCH_PATTERN.USED_FOR_COOKING] = formatted_desc_heading(gc(
	"ui_saint_description_section_used_for_cooking")),
	[DESC_HEADING_SEARCH_PATTERN.REPLACEMENT_PARTS] = formatted_desc_heading(gc("st_ui_awr_parts_list")),
	[DESC_HEADING_SEARCH_PATTERN.COMPATIBLE_REPAIR_KITS] = formatted_desc_heading(gc("st_ui_repair_kit_list")),
	[DESC_HEADING_SEARCH_PATTERN.COMPATIBLE_WORKSHOP_LIST] = formatted_desc_heading(gc("st_ui_workshop_kit_list"))
}

function rewrite_desc_heading_substitutes(desc)
	-- Replace occurrences of a line containing "Used for crafting:" with "CRAFTING:"
	local lines = split_string_into_collection(desc, "\\n")
	local new_lines = {}

	for i = 1, #lines do
		local line = lines[i]

		for pattern, replacement in pairs(DESC_HEADING_REPLACEMENTS) do
			if line:find(pattern) then
				line = replacement
				break
			end
		end

		table.insert(new_lines, line)
	end

	return table.concat(new_lines, " \\n")
end

function rewrite_desc_heading_colors(desc)
	local lines = split_string_into_collection(desc, "\\n")
	local new_lines = {}

	for i = 1, #lines do
		local line = lines[i]

		if get_line_kind(line) ~= LINE_KIND.SECTION_HEADER then
			table.insert(new_lines, line)
			goto continue
		end

		local section_header_start_index, section_header_end_index = re.find(line, [[[A-Z]^+3]])
		local section_header = line:sub(section_header_start_index, section_header_end_index) or "Unknown"
		local formatted_section_header = formatted_desc_heading(section_header)

		table.insert(new_lines, formatted_section_header)
		::continue::
	end

	return table.concat(new_lines, " \\n")
end

-- Line Analysis

function get_line_kind(line)
	-- If line contains dot character, return bullet point
	if line:find(DOT) then
		return LINE_KIND.BULLET_POINT
	end

	-- If line contains only uppercase characters followed by a colon ':', return section header
	if re.find(line, "[A-Z]^+3':'") then
		return LINE_KIND.SECTION_HEADER
	end

	-- If line is not empty and contains more than just white space, return text
	if line ~= "" and line:find("%S") then
		return LINE_KIND.TEXT
	end

	-- Otherwise, return nil
	return nil
end

-- Utility: Capitalization

function capitalize_words_by_length(str)
	local max_line_length_to_capitalize = CONFIG.CAPITALIZATION_HEURISTIC_MAX_CHARS

	if string.len(str) < max_line_length_to_capitalize then
		return capitalize_words(str)
	else
		return capitalize_first_word(str)
	end
end

function capitalize_words(str)
	local words = split_string_into_collection(str, " ")
	local skip_words = set_from_collection({ "as", "of", "on", "and", "for", "with", "without", "through", "its", "the",
		"to", "in", "by", "mm", "cm", "msv", "ml", "mg", "mcg", "ma/h" })

	local capitalized_words = {}

	for i, word in ipairs(words) do
		-- If the word is in the uncapitalized words table, then skip it.
		if i > 1 and skip_words[string.lower(word)] then
			table.insert(capitalized_words, word)
		else
			if string.sub(word, 1, 1) == "(" then
				-- Found a parenthetical, capitalize the word after the parenthetical.
				table.insert(capitalized_words, "(" .. capitalize_word(string.sub(word, 2)))
			elseif string.sub(word, 1, 2) == "%c" then
				-- Found a color tag, capitalize the word after the color tag.
				local tag_end_index = string.find(word, "]")
				local tag = string.sub(word, 1, tag_end_index)
				local tag_word = string.sub(word, tag_end_index + 1)

				table.insert(capitalized_words, tag .. capitalize_word(tag_word))
			else
				table.insert(capitalized_words, capitalize_word(word))
			end
		end
	end

	return table.concat(capitalized_words, " ")
end

function capitalize_word(str)
	str = string.upper(string.sub(str, 1, 1)) .. string.sub(str, 2)
	str = string.gsub(str, "%-(%l)", function(s)
		return "-" .. string.upper(s)
	end)

	return str
end

function capitalize_first_word(str)
	-- if string is nil, empty, or has less than two characters, return
	if not str or #str < 2 then
		return str
	end

	return string.upper(string.sub(str, 1, 1)) .. string.sub(str, 2)
end

-- Utility: Trimming

function trim_string(str)
	return str:gsub("^%s*(.-)%s*$", "%1")
end

-- Utility: Collections

function split_string_into_collection(str, sep)
	local lines = {}
	local last_split_index = nil

	-- Find occurrence of `sep` in `str`, split `str` at that index, and store the split substrings in `lines`
	for i = 1, #str do
		if str:sub(i, i + #sep - 1) == sep then
			lines[#lines + 1] = str:sub(last_split_index or 1, i - 1)
			last_split_index = i + #sep
		end
	end

	-- Store the last substring in `str` in `lines`
	lines[#lines + 1] = str:sub(last_split_index or 1)

	return lines
end

function set_from_collection(arr)
	local tbl = {}

	for i, v in ipairs(arr) do
		tbl[v] = true
	end

	return tbl
end

-- Logging

function log_to_file(message)
	local log_file = io.open("log_saint_utils.txt", "a")
	log_file:write(message .. "\n")
	log_file:close(log_file)
end

log_divider = "\n------------------\n"

-- Export

if not game then
	return {
		normalize_name = normalize_name,
		normalize_desc = normalize_desc
	}
end
