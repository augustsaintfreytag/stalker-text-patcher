-- Preloading
-- Mock game bare environment to allow running tests.

if game then
	lulpeg = require "lulpeg"
	re = lulpeg.re
else
	SAINT_UTILS_CONFIG = require "gamedata/scripts/saint_utils_config"
end

-- Config

local CONFIG = SAINT_UTILS_CONFIG

-- Library

local CAPITALIZATION_WORD_MAP

local DOT = "â€¢"

local LINE_KIND = {
	TEXT = "text",
	BULLET_POINT = "bullet_point",
	SECTION_HEADER = "section_header"
}

local COLOR = {
	TEXT = "%c[ui_gray_2]",
	TEXT_EMPHASIS = "%c[ui_gray_3]",
	TEXT_PARENTHETICAL = "%c[ui_gray_1]",
	SECTION = "%c[ui_gray_3]",
	BULLET_NEUTRAL = "%c[d_cyan]",
	BULLET_BENEFICIAL = "%c[d_green]",
	BULLET_DETRIMENTAL = "%c[d_red]",
	BULLET_TUTORIAL = "%c[d_orange]"
}

-- Logic

function normalize_name(name)
	name = capitalize_words(name)
	name = normalize_desc_parentheses(name)

	return name
end

function normalize_desc(desc)
	desc = trim_desc_spacing(desc)
	desc = rewrite_hyphen_lists(desc)
	desc = rewrite_desc_heading(desc)
	desc = rewrite_stacked_bullet_points(desc)
	desc = rewrite_desc_bullet_point_lines(desc)
	desc = rewrite_desc_line_spacing(desc)

	return desc
end

function rewrite_stacked_bullet_points(desc)
	-- Split description into lines, check each `LINE_KIND` for being a bullet point.
	-- If two bullet points per line are found, insert new line before dot and preceding color tag.

	local lines = split_string_into_collection(desc, "\\n")
	local new_lines = {}

	for i = 1, #lines do
		local line = lines[i]

		-- If line does not contain two dot characters, skip line.
		local _, number_of_dots = string.gsub(line, DOT, DOT)

		if number_of_dots ~= 2 then
			table.insert(new_lines, line)
			goto continue
		end

		-- Find start index after first occurrence of dot for matching.
		local first_dot_start_index = line:find(DOT)

		-- Find index of color tag, dot, color tag after initial dot to find unwanted concatenated segment.
		local second_dot_start_index, _ = re.find(line,
			"'%c['[a-zA-Z0-9_, ]+']'%s*'" .. DOT .. "'%s*'%c['[a-zA-Z0-9_, ]+']'", first_dot_start_index)

		if not second_dot_start_index then
			-- Found two dots in line but could not determine index of second dot, skip line.
			table.insert(new_lines, line)
			goto continue
		end

		-- Insert new line at second dot index, add to table.
		local left_line = line:sub(1, second_dot_start_index - 1)
		table.insert(new_lines, left_line)

		-- Insert remainder of line after second dot index, add to table.
		local right_line = line:sub(second_dot_start_index)
		table.insert(new_lines, right_line)

		::continue::
	end

	return table.concat(new_lines, " \\n")
end

function trim_desc_spacing(desc)
	local string_lookaround_range = 8

	-- Slice off beginning of description, remove any leading newlines and white space, reconcatenate
	local desc_head, desc_tail = desc:sub(1, string_lookaround_range), desc:sub(string_lookaround_range + 1)
	desc_head = re.gsub(desc_head, [[{'\n'%s*}+]], "")
	desc_head = string.gsub(desc_head, '^%s*{.-}%s*$', '%1')
	desc = desc_head .. desc_tail

	-- Slice off end of description, remove any trailing newlines and white space, reconcatenate
	local desc_head, desc_tail = desc:sub(1, -string_lookaround_range), desc:sub(-string_lookaround_range + 1)
	desc_tail = re.gsub(desc_tail, [[{'\n'%s*}+]], "")
	desc = desc_head .. desc_tail

	return desc
end

function rewrite_desc_line_spacing(desc)
	local lines = split_string_into_collection(desc, "\\n")

	local new_lines = {}
	local last_line_kind = nil

	for i = 1, #lines do
		-- Unpack line as trimmed line

		local line = lines[i]:gsub("^%s*(.-)%s*$", "%1")
		local line_kind = get_line_kind(line)

		if not line_kind then
			goto continue
		end

		-- If line is text, always prepend paragraph break (omit if first element)
		-- If line is a section header, always prepend paragraph break (omit if first element)
		if (line_kind == LINE_KIND.TEXT) or (line_kind == LINE_KIND.SECTION_HEADER) then
			if last_line_kind ~= nil then
				table.insert(new_lines, " \\n \\n")
			end

			table.insert(new_lines, line)
			goto continue
		end

		if line_kind == LINE_KIND.BULLET_POINT then
			if last_line_kind == LINE_KIND.TEXT then
				table.insert(new_lines, " \\n \\n")
			else
				table.insert(new_lines, " \\n")
			end

			table.insert(new_lines, line)
			goto continue
		end

		::continue::

		if line_kind then
			last_line_kind = line_kind
		end
	end

	return table.concat(new_lines, "")
end

function rewrite_hyphen_lists(desc)
	-- Replace sections defined with a hyphen after color tags with bullet points (dot).
	-- Mainly applicable to descriptions of ammunition items.

	local lines = split_string_into_collection(desc, "\\n")
	local new_lines = {}

	for _, line in ipairs(lines) do
		local new_line = line

		if not string.find(line, "-") then
			table.insert(new_lines, new_line)
			goto continue
		end

		local sanitized_line = trim_string(strip_color_tags(new_line))

		if string.sub(sanitized_line, 1, 1) ~= "-" then
			table.insert(new_lines, new_line)
			goto continue
		end

		new_line = COLOR.BULLET_TUTORIAL .. " " .. DOT .. " " .. COLOR.TEXT .. string.sub(sanitized_line, 2)
		table.insert(new_lines, new_line)

		::continue::
	end

	return table.concat(new_lines, " \\n")
end

function strip_color_tags(str)
	return re.gsub(str, "'%c['[a-zA-Z0-9_, ]+']'", "")
end

function rewrite_desc_bullet_point_lines(desc)
	local lines = split_string_into_collection(desc, "\\n")
	local new_lines = {}

	for i = 1, #lines do
		local line = lines[i]
		-- Find index of the last character in a match of color tag, dot, color tag, and whitespace.
		local _, leader_end_index =
			re.find(line, "'" .. DOT .. "'%s*('%c['[a-zA-Z0-9_, ]+']')*%s*")

		if not leader_end_index then
			table.insert(new_lines, line)
			goto continue
		end

		-- Bullet point line found, destructure into components.

		local line_prefix = line:sub(1, leader_end_index)
		local line_content = line:sub(leader_end_index + 1)

		-- Check for parenthetical in line content and wrap in appropriate color tags (`COLOR.PARENTHETICAL`).

		if CONFIG.COLOR_DESC_PARENTHETICALS then
			line_content = color_line_parentheticals(line_content)
		end

		-- Check for parenthetical for coloring and split capitalization.

		if CONFIG.CAPITALIZATION_SPLIT_FOR_PARENTHETICALS then
			line_content = capitalize_line_parenthetical(line_content)
		end

		-- Check for colon in line, capitalize left side, capitalize right side by length.

		if line_content:find(":") then
			line_content = format_line_colons(line_content)
		else
			line_content = format_line_component(line_content)
		end

		-- Define rewritten line with bullet point with appropriate color tags and spacing.
		line_content = line_leader() .. line_content
		table.insert(new_lines, line_content)

		::continue::
	end

	return table.concat(new_lines, " \\n")
end

function line_leader()
	return " " .. COLOR.BULLET_NEUTRAL .. " " .. DOT .. " "
end

function format_line_colons(line)
	local line_colon_index, _ = line:find(":")

	if not line_colon_index then
		return line
	end

	local line_name_left = line:sub(1, line_colon_index - 1)
	local line_name_right = line:sub(line_colon_index + 1)

	line_name_left = capitalize_words(line_name_left)
	line_name_right = capitalize_words_by_length(line_name_right)

	if CONFIG.COLOR_DESC_COLON_BULLET_POINTS then
		return COLOR.TEXT ..
			line_name_left ..
			":" .. COLOR.TEXT_EMPHASIS .. line_name_right
	end

	return COLOR.TEXT .. line_name_left .. ":" .. line_name_right
end

function format_line_component(line)
	return COLOR.TEXT .. capitalize_words_by_length(line)
end

function color_line_parentheticals(line)
	return re.gsub(line, "'('{.+}')'", COLOR.TEXT_PARENTHETICAL .. "(%1)" .. COLOR.TEXT)
end

function capitalize_line_parenthetical(line)
	local parentheses_start_index, _ = line:find("%(")

	if not parentheses_start_index then
		return line
	end

	-- Found parenthetical, split string up to first parenthesis.
	local line_content_left = line:sub(1, parentheses_start_index - 1)
	local line_content_right = line:sub(parentheses_start_index)

	return capitalize_words_by_length(line_content_left) .. line_content_right
end

function normalize_desc_parentheses(str)
	-- Normalize parentheses (only use round parentheses)
	str = str:gsub("[%[%{]", "(")
	str = str:gsub("[%]%}]", ")")

	-- Separate touching parentheses without whitespace
	str = str:gsub("(%(.+?%))(%(.+?%))", "$1 $2")

	return str
end

-- Section Heading Rewrite

function rewrite_desc_heading(desc)
	local lines = split_string_into_collection(desc, "\\n")
	local new_lines = {}

	for i = 1, #lines do
		local line = lines[i]

		if get_line_kind(line) ~= LINE_KIND.SECTION_HEADER then
			table.insert(new_lines, line)
			goto continue
		end

		local section_header_start_index, section_header_end_index = re.find(line, [[[A-Z]^+3]])
		local section_header = line:sub(section_header_start_index, section_header_end_index) or "Unknown"
		local formatted_section_header = formatted_desc_heading(section_header)

		table.insert(new_lines, formatted_section_header)
		::continue::
	end

	return table.concat(new_lines, " \\n")
end

function formatted_desc_heading(heading)
	-- Make input all uppercase and append a colon, wrap in color tags.
	local formatted_heading = string.upper(heading)

	if CONFIG.USE_COLON_FOR_SECTION_HEADERS then
		formatted_heading = formatted_heading .. ":"
	end

	return COLOR.SECTION .. formatted_heading .. COLOR.TEXT
end

-- Line Analysis

function get_line_kind(line)
	local sanitized_line = strip_color_tags(line)

	-- If line contains dot character, detect line as bullet point.
	if sanitized_line:find(DOT) then
		return LINE_KIND.BULLET_POINT
	end

	-- If line satisfies length constraints and contains uppercase-only characters
	-- optionally followed by a colon ':', detect line as section header.
	if sanitized_line:len() < CONFIG.SECTION_HEADER_HEURISTIC_MAX_CHARS then
		local section_header_start_index, _ = re.find(sanitized_line, "[A-Z ]^+3':'*")
		if section_header_start_index and section_header_start_index == 1 then
			return LINE_KIND.SECTION_HEADER
		end
	end

	-- If line is not empty and contains more than just white space, detect line as text.
	if sanitized_line ~= "" and sanitized_line:find("%S") then
		return LINE_KIND.TEXT
	end

	-- Line is indeterminate, may be whitespace or empty.
	return nil
end

-- Utility: Capitalization

function capitalize_words_by_length(str)
	local max_line_length_to_capitalize = CONFIG.CAPITALIZATION_HEURISTIC_MAX_CHARS
	local sanitized_str_length = strip_color_tags(str):len()

	if sanitized_str_length < max_line_length_to_capitalize then
		return capitalize_words(str)
	else
		return capitalize_first_word(str)
	end
end

function capitalize_words(str)
	if not CAPITALIZATION_WORD_MAP then
		CAPITALIZATION_WORD_MAP = map_from_table_values(CONFIG.CAPITALIZATION_SKIP_WORDS)
	end

	local words = split_string_into_collection(str, " ")
	local capitalized_words = {}

	for index, word in ipairs(words) do
		-- If the word is in the uncapitalized words table, then skip it.
		if index > 1 and CAPITALIZATION_WORD_MAP[string.lower(word)] then
			table.insert(capitalized_words, word)
			goto continue
		end

		if string.sub(word, 1, 1) == "(" then
			-- Found a parenthetical, capitalize the word after the parenthetical.
			table.insert(capitalized_words, "(" .. capitalize_word(string.sub(word, 2)))
		elseif string.sub(word, 1, 2) == "%c" then
			-- Found a color tag, capitalize the word after the color tag.
			local tag_end_index = string.find(word, "]")
			local tag = string.sub(word, 1, tag_end_index)
			local tag_word = string.sub(word, tag_end_index + 1)

			table.insert(capitalized_words, tag .. capitalize_word(tag_word))
		else
			table.insert(capitalized_words, capitalize_word(word))
		end

		::continue::
	end

	return table.concat(capitalized_words, " ")
end

function capitalize_word(str)
	str = string.upper(string.sub(str, 1, 1)) .. string.sub(str, 2)
	str = string.gsub(str, "%-(%l)", function(s)
		return "-" .. string.upper(s)
	end)

	return str
end

function capitalize_first_word(str)
	-- if string is nil, empty, or has less than two characters, return
	if not str or #str < 2 then
		return str
	end

	return string.upper(string.sub(str, 1, 1)) .. string.sub(str, 2)
end

-- Utility: Trimming

function trim_string(str)
	return str:gsub("^%s*(.-)%s*$", "%1")
end

-- Utility: Collections

function split_string_into_collection(str, sep)
	local lines = {}
	local last_split_index = nil

	-- Find occurrence of `sep` in `str`, split `str` at that index, and store the split substrings in `lines`
	for i = 1, #str do
		if str:sub(i, i + #sep - 1) == sep then
			lines[#lines + 1] = str:sub(last_split_index or 1, i - 1)
			last_split_index = i + #sep
		end
	end

	-- Store the last substring in `str` in `lines`
	lines[#lines + 1] = str:sub(last_split_index or 1)

	return lines
end

function map_from_table_values(collection)
	local map = {}

	for _, value in ipairs(collection) do
		map[value] = true
	end

	return map
end

function map_table_keys(collection)
	local map = {}

	for key, _ in pairs(collection) do
		map[key] = true
	end

	return map
end

-- Utility: Hashing

function hash_value(string)
	local hash = 0

	for i = 1, #string do
		hash = string.byte(string, i) + bit.lshift(hash, 6) + bit.lshift(hash, 16) - hash
	end

	return hash
end

-- Logging

function ellipsized_string(str, max_length)
	max_length = max_length or 32

	if string.len(str) > max_length then
		return string.sub(str, 1, max_length - 3) .. "..."
	else
		return str
	end
end

function log_to_file(message)
	local log_file = io.open("saint_utils.log", "a")
	log_file:write(message .. "\n")
	log_file:close(log_file)
end

log_divider = "\n------------------\n"

-- Export

if not game then
	return {
		normalize_name = normalize_name,
		normalize_desc = normalize_desc,
		capitalize_words = capitalize_words,
		capitalize_words_by_length = capitalize_words_by_length
	}
end
